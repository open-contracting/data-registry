name: CI
on: [push, pull_request]
jobs:
  build:
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt', 'setup.py') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - run: pip install -r requirements.txt
      # Check requirements.txt contains production requirements.
      - run: ./manage.py --help
      - run: pip install -r requirements_dev.txt
      - name: Run checks and tests
        env:
          # django-modeltranslation>0.17.3 https://github.com/deschler/django-modeltranslation/pull/618
          # django-markdownx>3.0.1 https://github.com/neutronX/django-markdownx/pull/206
          PYTHONWARNINGS: error,ignore:'modeltranslation',ignore:::markdownx.urls
          DJANGO_SETTINGS_MODULE: core.settings.github
          DATABASE_URL: postgresql://postgres:postgres@localhost:${{ job.services.postgres.ports[5432] }}/postgres?application_name=data_registry
        run: |
          ./manage.py migrate
          ./manage.py makemigrations --check --dry-run
          ./manage.py check --fail-level WARNING
          coverage run --source core,data_registry manage.py test
      - uses: actions/setup-node@v1
        with:
          node-version: "12.x"
      - run: cd data_registry/vue/; npm ci
      - run: cd data_registry/vue/; npm run build --if-present
      - run: cd data_registry/vue/; npm test
      - env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: coveralls --service=github
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432/tcp

  docker:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - run: echo "TAG=${GITHUB_REF##*/}" >> $GITHUB_ENV
      - uses: actions/checkout@v2
      # https://github.com/docker/login-action#github-container-registry
      - uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # https://github.com/docker/setup-buildx-action#usage
      - uses: docker/setup-buildx-action@v1
      # https://github.com/docker/build-push-action#usage
      - uses: docker/build-push-action@v2
        with:
          push: true
          file: Dockerfile_django
          tags: |
            ghcr.io/${{ github.repository }}-django:latest
            ghcr.io/${{ github.repository }}-django:${{ env.TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - uses: docker/build-push-action@v2
        with:
          push: true
          file: Dockerfile_static
          tags: |
            ghcr.io/${{ github.repository }}-static:latest
            ghcr.io/${{ github.repository }}-static:${{ env.TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
