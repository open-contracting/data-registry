name: CI
on: [push, pull_request]
env:
  BASEDIR: https://raw.githubusercontent.com/open-contracting/standard-maintenance-scripts/main
  OCDS_NOINDENT: 1
jobs:
  build:
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:11
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432/tcp
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v1
        with:
          python-version: 3.6
      - uses: actions/cache@v1
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements_dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      # Check requirements.txt contains production requirements.
      - run: pip install -r requirements.txt
      - run: ./manage.py --help
      - run: curl -s -S --retry 3 $BASEDIR/tests/install.sh | bash -
      - run: pip install -r requirements_dev.txt
      - run: curl -s -S --retry 3 $BASEDIR/tests/script.sh | bash -
      - run: STANDARD_MAINTENANCE_SCRIPTS_IGNORE=gunicorn pytest /tmp/test_requirements.py
      - run: coverage run --source core,data_registry manage.py test --settings core.settings.github
        if: always()
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:${{ job.services.postgres.ports[5432] }}/postgres?application_name=data_registry
      - uses: actions/setup-node@v1
        with:
          node-version: "12.x"
      - run: cd data_registry/vue/; npm ci
      - run: cd data_registry/vue/; npm run build --if-present
      - run: cd data_registry/vue/; npm test
      - env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: coveralls --service=github

  docker:
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Get the tag name
        run: echo "TAG=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Log in to GitHub Docker Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build container image for django
        uses: docker/build-push-action@v2
        with:
          push: true
          file: Dockerfile_django
          tags: |
            ghcr.io/open-contracting/data-registry-django:latest
            ghcr.io/open-contracting/data-registry-django:${{ env.TAG }}
      - name: Build container image for static files
        uses: docker/build-push-action@v2
        with:
          push: true
          file: Dockerfile_static
          tags: |
            ghcr.io/open-contracting/data-registry-static:latest
            ghcr.io/open-contracting/data-registry-static:${{ env.TAG }}
